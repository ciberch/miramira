{
 "kind": "discovery#restDescription",
 "etag": "\"FXg0A28N_NroVcWfuis3wdzFI3o/KXCoDInUQQChzbbLq9MmKrTYryg\"",
 "discoveryVersion": "v1",
 "id": "glass:v1",
 "name": "glass",
 "version": "v1",
 "title": "Glass Mirror API",
 "description": "API for interacting with Glass users via the timeline.",
 "icons": {
  "x16": "http://www.google.com/images/icons/product/search-16.gif",
  "x32": "http://www.google.com/images/icons/product/search-32.gif"
 },
 "documentationLink": "https://devsite.googleplex.com/glass",
 "protocol": "rest",
 "baseUrl": "https://www.googleapis.com/glass/v1/",
 "basePath": "/glass/v1/",
 "rootUrl": "https://www.googleapis.com/",
 "servicePath": "glass/v1/",
 "batchPath": "batch",
 "parameters": {
  "alt": {
   "type": "string",
   "description": "Data format for the response.",
   "default": "json",
   "enum": [
    "json"
   ],
   "enumDescriptions": [
    "Responses with Content-Type of application/json"
   ],
   "location": "query"
  },
  "fields": {
   "type": "string",
   "description": "Selector specifying which fields to include in a partial response.",
   "location": "query"
  },
  "key": {
   "type": "string",
   "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
   "location": "query"
  },
  "oauth_token": {
   "type": "string",
   "description": "OAuth 2.0 token for the current user.",
   "location": "query"
  },
  "prettyPrint": {
   "type": "boolean",
   "description": "Returns response with indentations and line breaks.",
   "default": "true",
   "location": "query"
  },
  "quotaUser": {
   "type": "string",
   "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
   "location": "query"
  },
  "userIp": {
   "type": "string",
   "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
   "location": "query"
  }
 },
 "schemas": {
  "Attachment": {
   "id": "Attachment",
   "type": "object",
   "description": "Represents media content, such as a photo, that can be attached to a TimelineItem.",
   "properties": {
    "contentType": {
     "type": "string",
     "description": "The MIME type of the attachment."
    },
    "contentUrl": {
     "type": "string",
     "description": "The URL for the content."
    },
    "id": {
     "type": "string",
     "description": "The ID of the attachment."
    },
    "thumbnailUrl": {
     "type": "string",
     "description": "The URL for an image thumbnail representing the content."
    }
   }
  },
  "Empty": {
   "id": "Empty",
   "type": "object",
   "description": "Empty template used to return a response without a body.",
   "properties": {
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#empty.",
     "default": "glass#empty"
    }
   }
  },
  "Entity": {
   "id": "Entity",
   "type": "object",
   "description": "A person or group that can be used as a creator or a share target.",
   "properties": {
    "acceptTypes": {
     "type": "array",
     "description": "A list of MIME types that a share target can handle. The share target will be shown to the user if any of its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are given, the share target will be shown for all items.",
     "items": {
      "type": "string"
     }
    },
    "displayName": {
     "type": "string",
     "description": "The name to display for this entity."
    },
    "email": {
     "type": "string",
     "description": "EXPERIMENTAL: Do not use externally. Primary email for the entity."
    },
    "id": {
     "type": "string",
     "description": "An ID for this entity. This is generated by the application and is treated as an opaque token by Glass."
    },
    "imageUrls": {
     "type": "array",
     "description": "Set of image urls to display for an entity. Most entities will have a single image, but a \"group\" entity may include up to 8 image urls and they will be re-sized and cropped into a mosaic on the client.",
     "items": {
      "type": "string"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#entity.",
     "default": "glass#entity"
    },
    "phoneNumber": {
     "type": "string",
     "description": "Primary phone number for the entity. This can be a fully-qualified number, with country calling code and area code or a local number."
    },
    "priority": {
     "type": "integer",
     "description": "Priority for the entity to determine ordering in a list of entities. Entities with higher priorities will be shown before ones with lower priorities.",
     "format": "uint32"
    },
    "secondaryEmails": {
     "type": "array",
     "description": "EXPERIMENTAL: Do not use externally. Set of secondary emails for the entity.",
     "items": {
      "type": "string"
     }
    },
    "secondaryPhoneNumbers": {
     "type": "array",
     "description": "EXPERIMENTAL: Do not use externally. Set of secondary phone numbers for the entity. See phoneNumber.",
     "items": {
      "type": "string"
     }
    },
    "source": {
     "type": "string",
     "description": "The ID of the application that created this entity."
    },
    "type": {
     "type": "string",
     "description": "The type for this entity. This is used for sorting in UIs. Allowed values are:  \n- INDIVIDUAL - Represents a single person. This is the default. \n- GROUP - Represents more than a single person."
    }
   }
  },
  "Location": {
   "id": "Location",
   "type": "object",
   "description": "A geographic location that can be associated with a TimelineItem.",
   "properties": {
    "accuracy": {
     "type": "number",
     "description": "The accuracy of the location fix in meters.",
     "format": "double"
    },
    "address": {
     "type": "string",
     "description": "The full address of the location."
    },
    "displayName": {
     "type": "string",
     "description": "The name to be displayed. This may be a business name or a user-defined place, such as \"Home\"."
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#location.",
     "default": "glass#location"
    },
    "latitude": {
     "type": "number",
     "description": "The latitude, in degrees.",
     "format": "double"
    },
    "longitude": {
     "type": "number",
     "description": "The longitude, in degrees.",
     "format": "double"
    },
    "timestamp": {
     "type": "string",
     "description": "The time at which this location was captured, formated according to RFC 3339.",
     "format": "date-time"
    }
   }
  },
  "MenuItem": {
   "id": "MenuItem",
   "type": "object",
   "description": "A custom menu item that can be presented to the user by a TimelineItem.",
   "properties": {
    "action": {
     "type": "string",
     "description": "Controls the behavior when the user picks the menu option. Allowed values are:  \n- CUSTOM - Custom action set by the service, trigger an UPDATE notification containing the id of the selected menu item. This is the default value. \n- Built-in actions:  \n- REPLY - Initiate a reply to the Timeline Item using the voice recording UI. The creator attribute must be set in the Timeline Item for this menu to be available. \n- REPLY_ALL - Same behavior as REPLY. The original Timeline item's Share Target will be added to the reply item. \n- DELETE - Delete the Timeline item. \n- SHARE - Share the Timeline item with the available Share Targets. \n- READ_ALOUD - Read the Timeline item's text aloud. \n- VOICE_CALL - Initiate a phone call using the Timeline item's creator.phone_number attribute as recipient. \n- NAVIGATE - Navigate to the Timeline item's location."
    },
    "id": {
     "type": "string",
     "description": "The ID for this menu item. This is generated by the application and is treated as an opaque token by Glass."
    },
    "state": {
     "type": "string",
     "description": "The current state of this menu item."
    },
    "values": {
     "type": "array",
     "description": "For CUSTOM items, a list of values controlling the appearance of the menu item in each of its states. A value for the DEFAULT state must be provided. If the PENDING or CONFIRMED states are missing, they will not be shown.",
     "items": {
      "$ref": "MenuValue"
     }
    }
   }
  },
  "MenuValue": {
   "id": "MenuValue",
   "type": "object",
   "description": "A single value that is part of a MenuItem.",
   "properties": {
    "displayName": {
     "type": "string",
     "description": "The name to display for the item."
    },
    "iconUrl": {
     "type": "string",
     "description": "URL of an icon to display with the menu item."
    },
    "state": {
     "type": "string",
     "description": "The state that this value applies to."
    }
   }
  },
  "Notification": {
   "id": "Notification",
   "type": "object",
   "description": "A notification delivered by the API.",
   "properties": {
    "collection": {
     "type": "string",
     "description": "The collection that generated the notification."
    },
    "itemId": {
     "type": "string",
     "description": "The ID of the item that generated the notification."
    },
    "menuActions": {
     "type": "array",
     "description": "If the operation is MENU_ACTION, this contains the MenuItems that were selected to trigger the notification.",
     "items": {
      "$ref": "MenuItem"
     }
    },
    "operation": {
     "type": "string",
     "description": "The type of operation that generated the notification."
    },
    "userToken": {
     "type": "string",
     "description": "The user token provided by the service when it subscribed for notifications."
    },
    "verifyToken": {
     "type": "string",
     "description": "The secret verify token provided by the service when it subscribed for notifications."
    }
   }
  },
  "NotificationConfig": {
   "id": "NotificationConfig",
   "type": "object",
   "description": "Controls how notifications for a timeline item are presented to the user.",
   "properties": {
    "deliveryTime": {
     "type": "string",
     "description": "The time at which the notification should be delivered.",
     "format": "date-time"
    },
    "level": {
     "type": "string",
     "description": "Controls how intrusive the notification will be. Allowed values are:  \n- NO_NOTIFICATION - No notification. This is the default value. \n- AUDIO_ONLY - An audible notification."
    }
   }
  },
  "ShareTargetsListResponse": {
   "id": "ShareTargetsListResponse",
   "type": "object",
   "description": "A list of Entitys representing share targets. This is the response from the server to GET requests on the sharetargets collection.",
   "properties": {
    "items": {
     "type": "array",
     "description": "Share target list.",
     "items": {
      "$ref": "Entity"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#shareTargets.",
     "default": "glass#shareTargets"
    }
   }
  },
  "Subscription": {
   "id": "Subscription",
   "type": "object",
   "description": "A subscription to events on a Glass collection.",
   "properties": {
    "callbackUrl": {
     "type": "string",
     "description": "The URL where notifications should be delivered."
    },
    "collection": {
     "type": "string",
     "description": "The collection that is subscribed to. Allowed values are:  \n- timeline - Changes in the timeline including insertion, deletion and updates. \n- locations - Location updates."
    },
    "id": {
     "type": "string",
     "description": "The ID of the subscription."
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#subscription.",
     "default": "glass#subscription"
    },
    "operation": {
     "type": "array",
     "description": "A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:  \n- UPDATE - The item has been updated. \n- INSERT - A new item has been inserted. \n- DELETE - The item has been deleted. \n- MENU_ACTION - A custom menu item has been triggered by the user.",
     "items": {
      "type": "string"
     }
    },
    "updated": {
     "type": "string",
     "description": "The time at which this subscription was last modified, formated according to RFC 3339.",
     "format": "date-time"
    },
    "userToken": {
     "type": "string",
     "description": "An opaque token sent to the subscriber in notifications so that it can determine the ID of the user."
    },
    "verifyToken": {
     "type": "string",
     "description": "A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Glass."
    }
   }
  },
  "SubscriptionsListResponse": {
   "id": "SubscriptionsListResponse",
   "type": "object",
   "description": "A list of Subscriptions. This is the response from the server to GET requests on the subscription collection.",
   "properties": {
    "items": {
     "type": "array",
     "description": "The list of subscriptions.",
     "items": {
      "$ref": "Subscription"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#subscriptionsList.",
     "default": "glass#subscriptionsList"
    }
   }
  },
  "TimelineItem": {
   "id": "TimelineItem",
   "type": "object",
   "description": "Each item in the Glass user's timeline is represented as a TimelineItem JSON structure, described below.",
   "properties": {
    "attachments": {
     "type": "array",
     "description": "A list of media attachments associated with this item.",
     "items": {
      "$ref": "Attachment"
     }
    },
    "bundleId": {
     "type": "string",
     "description": "The bundle ID for this item. Services can specify a bundleId to group many items together. They appear under a single top-level item on the Glass Device."
    },
    "created": {
     "type": "string",
     "description": "The time at which this item was created, formated according to RFC 3339.",
     "format": "date-time"
    },
    "creator": {
     "$ref": "Entity",
     "description": "The user or group that created this item."
    },
    "displayTime": {
     "type": "string",
     "description": "The time that should be displayed when this item is viewed in the timeline, formatted according to RFC 3339. This user's timeline is sorted chronlogically on display time, so this will also determine where the item is displayed in the timeline. If not present the display time defaults to the \"updated\" time.",
     "format": "date-time"
    },
    "etag": {
     "type": "string",
     "description": "ETag for this item."
    },
    "html": {
     "type": "string",
     "description": "HTML content for this item. If both text and HTML are provided for an item, the HTML will be rendered in the timeline."
    },
    "htmlPages": {
     "type": "array",
     "description": "HTML pages for this item. If this field is specified, the item will be displayed as a bundle, with the html field as the cover. It is an error to specify this field without specifying the html field.",
     "items": {
      "type": "string"
     }
    },
    "id": {
     "type": "string",
     "description": "The ID of the timeline item. This is unique within a user's timeline."
    },
    "inReplyTo": {
     "type": "string",
     "description": "If this item was generated as a reply to another item, this field will be set to the id of the item being replied to. This can be used to attach a reply to the appropriate conversation or post."
    },
    "isDeleted": {
     "type": "boolean",
     "description": "When true, indicates this item is deleted, and only the id field is set."
    },
    "isPinned": {
     "type": "boolean",
     "description": "When true, indicates this item is pinned, which means it's grouped alongside \"active\" items like navigation and hangouts, on the opposite side of the home screen from historical (non-pinned) timeline items."
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#timelineItem.",
     "default": "glass#timelineItem"
    },
    "location": {
     "$ref": "Location",
     "description": "The geographic location associated with this item."
    },
    "menuItems": {
     "type": "array",
     "description": "A list of menu items that will be presented to the user when this item is selected in the timeline.",
     "items": {
      "$ref": "MenuItem"
     }
    },
    "notification": {
     "$ref": "NotificationConfig",
     "description": "Controls how notifications for this item are presented on the device. If this is missing, no notification will be generated."
    },
    "selfLink": {
     "type": "string",
     "description": "A URL that can be used to retrieve this item."
    },
    "shareTargets": {
     "type": "array",
     "description": "A list of users or groups that this item has been shared with.",
     "items": {
      "$ref": "Entity"
     }
    },
    "speakableText": {
     "type": "string",
     "description": "The speakable version of the content of this item."
    },
    "text": {
     "type": "string",
     "description": "Text content of this item."
    },
    "title": {
     "type": "string",
     "description": "The title of this item."
    },
    "updated": {
     "type": "string",
     "description": "The time at which this item was last modified, formated according to RFC 3339.",
     "format": "date-time"
    }
   }
  },
  "TimelineListResponse": {
   "id": "TimelineListResponse",
   "type": "object",
   "description": "A list of TimelineItems. This is the response from the server to GET requests on the timeline collection.",
   "properties": {
    "items": {
     "type": "array",
     "description": "Items in the timeline.",
     "items": {
      "$ref": "TimelineItem"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of resource. This is always glass#timeline.",
     "default": "glass#timeline"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The next page token. Provide this as the \"pageToken\" parameter in the request to retrieve the next page of results."
    }
   }
  }
 },
 "resources": {
  "attachments": {
   "methods": {
    "get": {
     "id": "glass.attachments.get",
     "path": "attachments/{itemId}/{attachmentId}",
     "httpMethod": "GET",
     "description": "Gets an attachment by id.",
     "parameters": {
      "attachmentId": {
       "type": "string",
       "description": "The ID of the attachment.",
       "required": true,
       "location": "path"
      },
      "itemId": {
       "type": "string",
       "description": "The ID of the timeline item the attachment is associated with.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "itemId",
      "attachmentId"
     ],
     "response": {
      "$ref": "Empty"
     },
     "supportsMediaDownload": true
    }
   }
  },
  "locations": {
   "methods": {
    "get": {
     "id": "glass.locations.get",
     "path": "locations/{id}",
     "httpMethod": "GET",
     "description": "Gets a single location by id.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the location or latest for the last known location.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "response": {
      "$ref": "Location"
     }
    }
   }
  },
  "shareTargets": {
   "methods": {
    "delete": {
     "id": "glass.shareTargets.delete",
     "path": "shareTargets/{id}",
     "httpMethod": "DELETE",
     "description": "Deletes a share target.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the share target.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ]
    },
    "get": {
     "id": "glass.shareTargets.get",
     "path": "shareTargets/{id}",
     "httpMethod": "GET",
     "description": "Gets a single share target by id.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the share target.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "response": {
      "$ref": "Entity"
     }
    },
    "insert": {
     "id": "glass.shareTargets.insert",
     "path": "shareTargets",
     "httpMethod": "POST",
     "description": "Inserts a new share target.",
     "request": {
      "$ref": "Entity"
     },
     "response": {
      "$ref": "Entity"
     }
    },
    "list": {
     "id": "glass.shareTargets.list",
     "path": "shareTargets",
     "httpMethod": "GET",
     "description": "Retrieves a list of share targets for the authenticated user.",
     "response": {
      "$ref": "ShareTargetsListResponse"
     }
    },
    "patch": {
     "id": "glass.shareTargets.patch",
     "path": "shareTargets/{id}",
     "httpMethod": "PATCH",
     "description": "Updates a share target in place. This method supports patch semantics.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the share target.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "request": {
      "$ref": "Entity"
     },
     "response": {
      "$ref": "Entity"
     }
    },
    "update": {
     "id": "glass.shareTargets.update",
     "path": "shareTargets/{id}",
     "httpMethod": "PUT",
     "description": "Updates a share target in place.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the share target.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "request": {
      "$ref": "Entity"
     },
     "response": {
      "$ref": "Entity"
     }
    }
   }
  },
  "subscriptions": {
   "methods": {
    "delete": {
     "id": "glass.subscriptions.delete",
     "path": "subscriptions/{id}",
     "httpMethod": "DELETE",
     "description": "Deletes a subscription.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the subscription.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ]
    },
    "insert": {
     "id": "glass.subscriptions.insert",
     "path": "subscriptions",
     "httpMethod": "POST",
     "description": "Creates a new subscription.",
     "request": {
      "$ref": "Subscription"
     },
     "response": {
      "$ref": "Subscription"
     }
    },
    "list": {
     "id": "glass.subscriptions.list",
     "path": "subscriptions",
     "httpMethod": "GET",
     "description": "Retrieves a list of subscriptions for the authenticated user and service.",
     "response": {
      "$ref": "SubscriptionsListResponse"
     }
    },
    "update": {
     "id": "glass.subscriptions.update",
     "path": "subscriptions/{id}",
     "httpMethod": "PUT",
     "description": "Updates an existing subscription in place.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the subscription.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "request": {
      "$ref": "Subscription"
     },
     "response": {
      "$ref": "Subscription"
     }
    }
   }
  },
  "timeline": {
   "methods": {
    "delete": {
     "id": "glass.timeline.delete",
     "path": "timeline/{timelineId}",
     "httpMethod": "DELETE",
     "description": "Deletes a timeline item.",
     "parameters": {
      "timelineId": {
       "type": "string",
       "description": "The ID of the timeline item.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "timelineId"
     ]
    },
    "get": {
     "id": "glass.timeline.get",
     "path": "timeline/{id}",
     "httpMethod": "GET",
     "description": "Gets a single timeline item by id.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the timeline item.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "response": {
      "$ref": "TimelineItem"
     }
    },
    "insert": {
     "id": "glass.timeline.insert",
     "path": "timeline",
     "httpMethod": "POST",
     "description": "Inserts a new item into the timeline.",
     "request": {
      "$ref": "TimelineItem"
     },
     "response": {
      "$ref": "TimelineItem"
     },
     "supportsMediaUpload": true,
     "mediaUpload": {
      "accept": [
       "audio/*",
       "image/*",
       "video/*"
      ],
      "maxSize": "10MB",
      "protocols": {
       "simple": {
        "multipart": true,
        "path": "/upload/glass/v1/timeline"
       },
       "resumable": {
        "multipart": true,
        "path": "/resumable/upload/glass/v1/timeline"
       }
      }
     }
    },
    "list": {
     "id": "glass.timeline.list",
     "path": "timeline",
     "httpMethod": "GET",
     "description": "Retrieves a list of timeline items for the authenticated user.",
     "parameters": {
      "includeDeleted": {
       "type": "boolean",
       "description": "If true, tombstone records for deleted items will be returned.",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maximum number of items to include in the response, used for paging.",
       "format": "uint32",
       "location": "query"
      },
      "orderBy": {
       "type": "string",
       "description": "Controls the order in which timeline items are returned.",
       "enum": [
        "displayTime",
        "writeTime"
       ],
       "enumDescriptions": [
        "Results will be ordered by displayTime (default). This is the same ordering as is used in the timeline on the device.",
        "Results will be ordered by the time at which they were last written to the data store."
       ],
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "Token for the page of results to return.",
       "location": "query"
      },
      "pinnedOnly": {
       "type": "boolean",
       "description": "If true, only pinned items will be returned.",
       "location": "query"
      }
     },
     "response": {
      "$ref": "TimelineListResponse"
     }
    },
    "patch": {
     "id": "glass.timeline.patch",
     "path": "timeline/{id}",
     "httpMethod": "PATCH",
     "description": "Updates a timeline item in place. This method supports patch semantics.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the timeline item.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "request": {
      "$ref": "TimelineItem"
     },
     "response": {
      "$ref": "TimelineItem"
     }
    },
    "update": {
     "id": "glass.timeline.update",
     "path": "timeline/{id}",
     "httpMethod": "PUT",
     "description": "Updates a timeline item in place.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The ID of the timeline item.",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "request": {
      "$ref": "TimelineItem"
     },
     "response": {
      "$ref": "TimelineItem"
     },
     "supportsMediaUpload": true,
     "mediaUpload": {
      "accept": [
       "audio/*",
       "image/*",
       "video/*"
      ],
      "maxSize": "10MB",
      "protocols": {
       "simple": {
        "multipart": true,
        "path": "/upload/glass/v1/timeline/{id}"
       },
       "resumable": {
        "multipart": true,
        "path": "/resumable/upload/glass/v1/timeline/{id}"
       }
      }
     }
    }
   }
  }
 }
}
